[{"title":"Hello World","url":"/2019/07/28/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"mysql8-linux-yum","url":"/2021/03/23/mysql8-linux-yum/","content":"安装过程参照Linux系统下MySQL 8.0安装\n# 检测系统是否自带安装 MySQLrpm -qa | grep mysql# 如果有安装可以选择进行卸载# 普通删除模式# rpm -e mysql# 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除# rpm -e --nodeps mysql# 去官网下载 Yum 资源包，下载地址：https://dev.mysql.com/downloads/repo/yum/wget https://repo.mysql.com//mysql80-community-release-el7-1.noarch.rpm# 安装 rpm -ivh mysql80-community-release-el7-1.noarch.rpmyum install mysql-server -y# 初始化MySQLmysqld --initialize# 加权限chown -R mysql:mysql /var/lib/mysql#启动service mysqld start# 进入日志查看密码 里面这段话为临时密码 cv出密码# A temporary password is generated for root@localhost:*****vim /var/log/mysql/mysqld.log# 进入mysql ,p后面可以直接跟上临时密码，也可以-p直接回车再输入密码mysql -u root -p临时密码\n\n修改密码#修改密码ALTER user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;你的密码&#x27;;\n\n开启远程访问use mysql;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;\n\n","tags":["linux","mysql","yum"]},{"title":"md语法练习","url":"/2019/12/22/test-sit/","content":"标题\n内容\n\n标题2console.log(&#x27;HelloWorld&#x27;);\n\n标题3\n无序列表1\n无序列表2\n无序列表3\n\n标题4加粗\n倾斜\n标题5\n\n\n列1\n列2\n列3\n\n\n\n1\n1\n1\n\n\n2\n2\n2\n\n\n3\n3\n3\n\n\n","tags":["md"]},{"title":"vim编辑器","url":"/2020/03/28/vim%E7%BC%96%E8%BE%91%E5%99%A8/","content":"命令使用 Vim 编辑文件:\nvi [文件名]vim [文件名]\n\n教学模式:\nvimtutor [语言]\n\nvim 教程，相当于使用Vim编辑器以只读模式打开教程文件。您无论对这个文件作了什么，都会在退出后恢复原来的样貌。与只读模式的区别在于，它不会没有眼色的提醒您，现在的状态为只读模式。您可以使用它作一些练习\n您可以指定教程文件的语言，如果使用本地语言(ZH_cn)出现乱码，您可以尝试使用英语\nvimtutor en\n\n使用 Vim 比较文件区别\nvimdiff [文件1] [文件2] [其它文件]……  \n\n配置文件Vim 的全局配置文件为 /etc/vim/vimrc ，用户配置文件为 ~/.vimrc ， &quot; 起始的行为注释行。我们提供的配置项，直接加入配置文件就可以了\n例如：可以先对 Vim 进行一些简单的配置\n&quot;运行在非兼容(VI)模式下(命令模式下 TAB 补全)set nocompatible&quot;设定文件编码set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936&quot;开启语法加亮syntax on&quot;配色风格colorscheme pablo&quot;简洁启动模式set shortmess=atI&quot;设定 GUI 选项&quot;set guioptions=gmrLtT  m:菜单 T:工具栏set guioptions=gmrLt&quot;命令行高度set cmdheight=1&quot;设定行距 ( GUI 界面中生效 )set linespace=4&quot;显示标尺set ruler&quot;自动折行&quot;set nowrapset wrap&quot;按完整单词折行set nolinebreak&quot;set linebreak&quot;行宽（输入时自动插入换行符）&quot;set textwidth=80set textwidth=0&quot;允许在 虚空间 内操作 （虚空间:不包含任何文本的空间。如换行符之后）&quot;set virtualedit=all&quot;禁止在 虚空间 内操作set virtualedit=&quot;设定 Tab 键缩进的空格数set tabstop=4&quot;设定编辑器将多少空格视为一个缩进set shiftwidth=4&quot;将缩进转换为空格&quot;set expandtab&quot;设定自动缩进(新行与前一行缩进相同)set autoindent&quot;set noautoindent&quot;插入模式下，“←”如何删除光标前的字符：行首空白、换行符、插入点之前的字符set backspace=indent,eol,start&quot;命令行历史纪录set history=500&quot;禁用增量搜索set incsearch&quot;set noincsearch&quot;搜索时忽略大小写set ignorecase&quot;set noignorecase&quot;高亮显示搜索结果set hlsearch&quot;设定折叠方式&quot;set foldmethod=manual&quot;以下字符将被视为单词的一部分 (ASCII)：&quot;set iskeyword+=33-47,58-64,91-96,123-128\n\n模式行也可以通过“模式行”将配置选项嵌入在普通文件中。打开此文件时，优先使用模式行中的配置：\n# vim: filetype=sh foldmethod=marker autoindent expandtab shiftwidth=4模式行可以写在任意位置但为了不影响文件功能，模式行通常写在注释中模式行以 vim: 起始，前面至少要有一个空白字符（空格、换行符等）模式行中的设置项以空格分隔……\n\n这种形式的缺点在于，不能在设置项后添加其它文本。如果有相关需要，可以使用另一种模式行：\n&lt;!-- vim:set filetype=html: 这里可以任意添加文本 --&gt;    \n\n模式介绍Vim 常见的模式有： 普通模式 、 插入模式 、 命令模式 ，另外我们也会经常用到 可视模式 。\n\nVim 启动时进入 *普通模式* ；或者在其它模式下，按下 Esc 键，便可以回到普通模式。\n使用 vimtutor en 命令进入教程，现在是普通模式。随便按几下 j 、 k 、 l 、 h 键，您会发现光标的位置发生改变。\n按下 i 键，编辑器底部出现了 – 插入 – 或者 – insert – ，您进入了插入模式。随便按几下 j 、 k 、 l 、 h ，您会发现相应的字符出现在编辑区，现在还可以通过方向键来移动光标。可能您觉得使用方向键移动光标不是什么问题，但是习惯了 Vim 后，您反而会认为方向键太麻烦了，简直不能容忍！好了，现在按下 Esc 键回到普通模式，我们又可以使用 j 、 k 、 l 、 h 来移动光标了。\n在普通模式下，按下 : 键（也就是 Shift+; ），在编辑器底部出现了一个 : ，您进入了命令模式。在 : 后输入一个命令 new ，回车后，编辑器被分割为上下两栏。为了方便起见，我们在命令前加一个 : 来表示命令模式下输入的命令，像这样\n:vnew\n\n命令能够以一些规则简化，上面的命令也可以写为这种形式\n:vne\n\n现在您的编辑区一定弄的四分五裂，您可以使用命令“**:quit**”来关闭当前栏，直接用简写就可以了\n:q\n\n这个命令是退出编辑器，如果编辑区被分成多栏，则是退出当前栏。\n执行完一个命令（按下回车后），编辑器会自动回到普通模式。如果想不执行当前命令，直接回到普通模式，您可以按下 Esc键。\n按下 v 键，您进入了可视模式，可以使用 j 、 k 、 l 、 h 移动光标，高亮选取文本 。\n事实上，可视模式相当于高亮选取文本后的普通模式。\n可视模式具有多种模式，以行为单位进行选取的可视行模式，使用 V 键进入（也就是 Shift+v ）；和以块为单位进行选取的可视块模式，使用 Ctrl+v 键进入。\n\n模式切换|当前模式|目标模式|操作|\n\n\n\n其它模式\n普通模式\nEsc\n\n\n\n\n普通模式\n插入模式\ni\n在光标前插入\n\n\n\n\nI\n在行首插入\n\n\n\n\na\n在光标后插入\n\n\n\n\nA\n在行末插入\n\n\n\n\no\n在当前行之下新建行\n\n\n\n\nO\n在当前行之上新建行\n\n\n\n\nr\n替换当前字符\n\n\n\n\nR\n从当前字符开始替换\n\n\n普通模式\n命令模式\n:\n\n\n\n普通模式\n可视模式\nv\n可视模式\n\n\n\n\nV\n可视行模式\n\n\n\n\nCtrl+v\n可视块模式\n\n\n移动在普通模式中，您可以使用以下方式移动光标\n    k(上)\n\n  h(左)    l(右)\n      j(下) \n\n您可以使用其它更有效率的方式移动光标\n\n\n\n\n向前\n向后\n\n\n\n单词\nw\nb\n\n\n单词，包括特殊符号\nW\nB\n\n\n单词词尾\ne\n\n\n\n单词词尾，包括特殊符号\nE\n\n\n\n\n\n\n\n\n行\n0\n$\n\n\n行首文字（不包括空格）\n^\n\n\n\n\n\n\n\n\n页\nH\nL\n\n\n页面中部\nM\n\n\n\n在其它模式中，您可以使用方向键移动光标，不过那样比较麻烦，您可以在配置文件中绑定插入模式下的功能键\nnoremap! &lt;M-j&gt; &lt;Down&gt;noremap! &lt;M-k&gt; &lt;Up&gt;noremap! &lt;M-h&gt; &lt;left&gt;noremap! &lt;M-l&gt; &lt;Right&gt;………………作用范围 键位 功能  \n\n其中，**map!绑定的键盘映射，作用于所有模式；inoremap!**绑定的映射，仅作用于插入模式。\n数字参数您也可以使用数字参数(普通模式)，来重复执行。例如\n#执行 100次j键，向下 100行100j\n\n浏览gg 定位到文件首行， V 进入可视行模式， G 定位到文件末行，实现类似“全选”的功能。依次按下 g g V(Shift+v) G(Shift+g)\n\n\n\n\n向前\n向后\n\n\n\n整页\nCtrl+f\nCtrl+b\n\n\n半页\nCtrl+d\nCtrl+u\n\n\n文件\nG\ngg\n\n\n按行号转到相应行\n行号 G\n\n\n\n按百分比转到相应的行\n1~100%\n\n\n\n按行卷动\nCtrl+e\nCtrl+y\n\n\n将光标所在行调整至页面中间\nzz\n\n\n\n统计字数\ng Ctrl+g\n\n\n\n显示位置信息\nCtrl+g\n\n\n\n刷新屏幕\nCtrl+l\n\n\n\n标记您可以在当前光标处作一个标记，以便快速返回\nm标记名称    定义标记。标记名称为一个字符`标记名称    返回标记mx           将当前光标处定义为标记 x`x           返回标记 x:marks       查看标记列表  \n\n编辑\n\n\n\n复制\n剪切\n\n\n\n字符\ny\nx\n\n\n行\nyy\ndd\n\n\n\n\n\n\n\n\n\n\np\n在光标后粘贴\n\n\nP\n在光标前粘贴\n\n\nu\n撤消\n\n\nCtrl+r\n重做\n\n\nCtrl+y\n逐字克隆上一行内容\n\n\nCtrl+e\n逐字克隆下一行内容\n\n\n搜索和替换按下 / 键，编辑器底部会出现 / 符号，接着输入字符串，便可以进行搜索\n\n\n\n\n\n\n\n\n\n\n&#x2F;\n向下搜索\n?\n向上搜索\n\n\nn\n搜索下一个\nN\n搜索上一个\n\n\n\n\n\n\n\n\n\n\n:s&#x2F;源字符串&#x2F;目标字符串\n将源字符串替换为目标字符串\n\n\n:s&#x2F;源字符串&#x2F;目标字符串&#x2F;g\n替换当前行中所有符合条件的字符串\n\n\n:行号1,行号2s&#x2F;源字符串&#x2F;目标字符串&#x2F;g\n在指定行中进行替换\n\n\n:%s&#x2F;源字符串&#x2F;目标字符串&#x2F;g\n全文替换\n\n\n寄存器操作Vim 可以将不同字段剪切或复制到不同寄存器中，您可以从不同寄存器中取出内容后粘贴\n&quot;寄存器名称\n\n按下**&quot;**键和另一个字符键，便可以定义一个寄存器。例如：&quot;a &quot;1\n定义寄存器后直接进行操作\n&quot;ayy    将当前行复制到寄存器 a 中&quot;ap     将寄存器 a 中的内容粘贴到光标之后\n\n\n:registers 查看所有寄存器的内容\n通常情况下，寄存器 + (先按”，再按 Shift+&#x3D; )对应 X 下的剪贴板。您在其它程序中复制的内容，可以使用 &quot;+p 粘贴到 Vim中；您在 Vim 中，可以使用 &quot;+y 将内容复制到剪贴板，再粘贴到其它程序中\n没有指定寄存器时，Vim 使用“无名寄存器”存储内容\n\n宏您可以将一系列的操作录制为一个宏，然后执行它\nq宏名称    开始录制宏。宏名称为一个字符q         录制中按下“q”键，结束录制@宏名称    执行宏\n\n\n可以使用 :registers（寄存器列表） 命令查看已记录的宏\n\n插入模式下的快捷键\n\n\n快捷键\n作用\n\n\n\nCtrl+r寄存器名称\n插入指定寄存器内容\n\n\nCtrl+k(2个字符)\n输入二合字符\n\n\nCtrl+v数字\n通过数字编码输入字符\n\n\nCtrl+v键位\n输入键位的名称\n\n\n键绑定、缩写前面我们已经向您介绍了键绑定\nmap! &lt;M-j&gt; &lt;Down&gt;\n\n尖括号及其中的内容，为 Vim 配置文件的约定，分别描述了按键和功能，表示将功能编写到按键上。如果绑定的只是普通字符，例如：\nmap! xxx XXXXX\n\n表示将 XXXXX 绑定到 xxx 上。当您键入 xxx 时，编辑器会自动替换为 XXXXX\n如果您只是想将字符串绑定为缩写，方便输入，我们建议您使用 iabbrev 来绑定。例如：\niabbrev g google\n\n在插入模式下键入 g ，编辑器会自动替换为 google 。您可以将 iabbrev 命令缩写为 iab ，例如：\niab g google\n\n以上命令，您可以直接在命令模式下输入，临时启用。也可以写入配置文件，永久启用。\n单词补全&lt;Ctrl+n&gt; 下一个匹配项&lt;Ctrl+p&gt; 上一个匹配项\n\n您可以在配置文件中定义补全的方式\n&quot;自动补全方式：(使用逗号分隔)set complete=k,.&quot;   .    当前文件&quot;   b    已被装缓冲区,但是没有在窗口内的文件&quot;   d    在当前的文件中定义和由 #include 包含进来的文件&quot;   i    由 #include 包含进来的文件&quot;   k    由 dictionary 选项定义的文件&quot;   kfile    名为&#123;file&#125;的文件&quot;   t    标记(tags)文件&quot;   u    没有载入的缓冲区&quot;   w    在其他窗口中的文件&quot;设定自动补全字典 ：set dictionary=path\n\n命令模式前面介绍了普通模式和插入模式。我们发现，普通模式主要用来浏览和修改文本内容，而插入模式则用来向文本中添加内容。\n而命令模式则多用于操作文本文件（而不是操作文本文件的内容），例如保存文件；或者用来更改编辑器本身的状态，例如设定多栏窗口、标签或者退出编辑器……\nw(rote) 将更改写入文件\n:w\n\nq(uit) 退出编辑器\n:q\n\n某些情况下，编辑器会阻止命令的执行。例如您修改了文件，而没有保存，那么您使用 :q 命令退出时，编辑器就不会执行这条命令，而是提醒您保存文件。\n这个时候，您可以在命令末尾追加 ! 来强制执行命令\n:命令!\n\n例如 :q! ，即便您没有保存已修改的文件，使用此命令，编辑器也会放弃修改而强行退出\n以 ! 引导一个 Shell 命令，则可以从 Vim 临时切换到 Shell 中，执行一个 Shell\n:!命令\n\n例如 :!ls\n命令模式还可以用来调节一些选项，例如\n:set linespace=6\n\n\n使用 Tab 键补全命令\n命令可以直接写入配置文件\n在选项后加上一个 &amp; 使用默认值，例如： :set linespace&amp;\n\n折叠\n\n\n命令\n作用\n\n\n\nzf数字\n创建折叠，数字参数为折叠行数\n\n\nzo\n打开折叠\n\n\nzc\n关闭折叠\n\n\nzd\n删除折叠\n\n\n:set foldcolumn&#x3D;4\n显示折叠树\n\n\n:mkview\n保存折叠\n\n\n:loadview\n读取折叠\n\n\nzr\n打开同一层级所有折叠\n\n\nzm\n关闭同一层级所有折叠\n\n\nzO\n打开某一行的所有层级折叠\n\n\nzC\n关闭某一行的所有层级折叠\n\n\nzR\n打开所有折叠\n\n\nzM\n关闭所有折叠\n\n\n:set foldclose&#x3D;all\n光标离开折叠自动关闭\n\n\n:set foldopen&#x3D;all\n光标遇到折叠自动打开\n\n\n您可以在配置文件中定义折叠的方式\n&quot;设定折叠方式set foldmethod=manual&quot; manual 手动折叠&quot; indent 按缩进折叠&quot; marker 按标记折叠&quot; syntax 按语法折叠&quot; expr   按表达式折叠\n\n按标记折叠的例子：\n#起始标记 &#123;&#123;&#123; 将标记放到注释里，不会影响文件的功能 起始标记和结束标记之间的内容折叠显示为起始标记所在行#结束标记 &#125;&#125;&#125;###### 将折叠方式写到模式行里 ###### vim: foldmethod=marker \n\n多栏窗口您可以使用以下命令，将当前窗口水平分为两栏\n:new\n\n新建一栏空白窗口，将当前文件分两栏显示\n:split\n\n同理，您可以使用下列命令，将当前窗口垂直分为两栏\n:vnew:vsplit\n\n先按下 ctrl+w 键，再按下方向键 j 、 k 、 l 、 h ，您可以切换到其它栏；在当前栏中使用 :q 命令，可以退出当前栏，也可以使用其它命令，对当前栏作出修改\n如果您希望当前命令在所有栏中生效，您可以在命令的末尾追加 all\n:命令all\n\n例如：**:qall**\n如果您希望这条命令强制执行，那么 ! 位于命令的最末，例如：**:qall!** 强行退出所有栏窗口\n标签页Vim 在7以后的版本，开始支持标签页的功能\n:tabnew    新建一个标签:tabnext   转到下一个标签:tabprevious  转到上一个标签\n\n您也可以使用鼠标点击标签进行切换\n文件管理使用 Vim 编辑目录时，会进入文件管理模式：\nvim .\n\n文件管理模式中可以实现一些简单的文件管理功能：\n\n\n\n命令\n作用\n\n\n\nenter\n打开文件或文件夹\n\n\nCtrl+o\n后退\n\n\no\n新开一栏进行编辑\n\n\nO\n在前一次打开的栏中编辑\n\n\np\n预览\n\n\ni\n显示&#x2F;隐藏文件大小、日期\n\n\ns\n切换文件排序方式\n\n\nr\n切换顺序、逆序\n\n\n-\n回到上一级目录\n\n\nc\n将 Vim 执行目录设定为当前目录\n\n\nR\n重命名\n\n\nD\n删除\n\n\nx\n运行\n\n\n\n:cd 设定所有窗口执行目录 ； :lcd 设定当前栏窗口执行目录\n\n加密使用 :X 命令为文件设定一个密码\n:XEnter encryption key: ******Enter same key again: ******\n\n\n如果要取消加密，可以设置密码为空\n\n可以禁用交换文件，以免泄密\nvim -x -n file.txt\n\n如果你已在经编辑这个文件了，那么交换文件 swapfile 可以用下面的命令禁止:\n:setlocal noswapfile\n\n由于没了交换文件，文件复原就不可能了。为了避免失去编辑的成果，要比平时更勤快地存盘你的文件\n现在你可以像平时一样编辑这个文件并把你所有的秘密放进去。当你编完文件要退出 Vim 时，这个文件就被加密存盘了\n当你下次用 Vim 编辑这个文件时，它就会询问你密码\n如果你试图用另一个程序来阅读这个文件，你将读到一堆垃圾。如果你用 Vim 来编辑这个文件，但输入了错误的密码，你也只能得到垃圾。Vim 并不具备检验密码正确性的机制 (这一点使得破译密码更为困难)\n","tags":["linux","vim"]}]